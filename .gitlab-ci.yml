variables:
  RULES_CHANGES_PATH: "*/"
  FRONTEND_PATH: "frontend/public"
  BACKEND_PATH: "backend/digitalbooking"


stages:
- build
- test 
- deploy


.base-rules:
    rules:
        - if: '$CI_PIPELINE_SOURCE == "push"'
          changes:
            - $RULES_CHANGES_PATH
        - when: always
          allow_failure: true

.backend:
    extends: .base-rules
    variables:
        RULES_CHANGES_PATH: "backend/*/"

.frontend: 
    extends: .base-rules
    variables:
        RULES_CHANGES_PATH: "frontend/*/"

backend-build:
    image: maven:3-openjdk-17
    stage: build
    extends: .backend
    needs: []
    script:
        - echo "Building backend"
        - "cd backend/digitalbooking"
        - "mvn clean package"
    artifacts: 
        paths:
        - $BACKEND_PATH/target/*.jar

frontend-build:
    image: node:16.13.1-alpine3.15
    stage: build
    extends: .frontend
    needs: []
    script: 
        - echo "Building frontend"
        - cd frontend/public
        - npm i --legacy-peer-deps
        - npm run build
    artifacts:
        paths:
        - $FRONTEND_PATH

backend-test:
    stage: test
    extends: .backend
    needs: ["backend-build"]
    script: 
        - echo "Testing backend"
    artifacts:
        paths:
        - $BACKEND_PATH/target/*.jar

frontend-test:
    stage: test
    extends: .frontend
    needs: ["frontend-build"]
    script:
        - echo "Testing frontend"
    artifacts:
        paths:
        - $FRONTEND_PATH/

backend-deploy:
  stage: deploy
  image: alpine:3.11
  extends: .backend
  needs: ["backend-test"]
  before_script:
    - apk update && apk add openssh-client bash
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$UBUNTU_SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - touch ~/.ssh/config
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - ssh-keyscan -H $UBUNTU_DEPLOY_SERVER_BA_IP >> ~/.ssh/known_hosts
    - echo "nohup java -jar /home/ubuntu/digitalbooking-0.0.1-SNAPSHOT.jar > output.log 2>&1 &" > start-app.sh
    - chmod +x start-app.sh
    - scp start-app.sh ubuntu@$UBUNTU_DEPLOY_SERVER_BA_IP:/home/ubuntu/ 
  script:
    - echo "Deploying..."
    - scp $BACKEND_PATH/target/*.jar ubuntu@$UBUNTU_DEPLOY_SERVER_BA_IP:/home/ubuntu/
    - ssh ubuntu@$UBUNTU_DEPLOY_SERVER_BA_IP 'pkill java|| echo "No hay proceso java corriendo"'
    - ssh ubuntu@$UBUNTU_DEPLOY_SERVER_BA_IP '/home/ubuntu/start-app.sh'
    
frontend-deploy:
    image: python:latest
    stage: deploy
    extends: .frontend
    needs: ["frontend-test"]
    script:
        - echo "Deploying frontend"
        - pip install awscli
        - aws configure set aws_access_key_id $DH_AWS_ACCESS_KEY_ID
        - aws configure set aws_secret_access_key $DH_AWS_SECRET_ACCESS_KEY
        - aws s3 sync $FRONTEND_PATH/ s3://$AWS_S3_NAME --delete